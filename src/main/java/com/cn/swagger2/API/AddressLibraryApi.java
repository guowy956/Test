/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cn.swagger2.API;

import com.cn.model.entity.AddressLibrary;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-09-07T09:32:08.696Z")
@Api(value = "addressLibrary", description = "the addressLibrary API")
@RequestMapping(value = "/api")
public interface AddressLibraryApi {

    @ApiOperation(value = "创建地址", notes = "创建地址.", response = SuccessModel.class, tags={ "addressLibrary", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = SuccessModel.class) })
    
    @RequestMapping(value = "/addressLibrary",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SuccessModel> createAddressLibrary(@ApiParam(value = "地址", required = true) @Valid @RequestBody AddressLibrary body);


    @ApiOperation(value = "删除地址", notes = "删除地址.", response = SuccessModel.class, tags={ "addressLibrary", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = SuccessModel.class),
        @ApiResponse(code = 202, message = "unexpected error", response = SuccessModel.class) })
    
    @RequestMapping(value = "/addressLibrary/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<SuccessModel> deleteAddressLibrary(@ApiParam(value = "地址id", required = true) @PathVariable("id") Long id);


    @ApiOperation(value = "获取全部地址", notes = "获取全部地址", response = SuccessModel.class, tags={ "addressLibrary", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = SuccessModel.class),
        @ApiResponse(code = 201, message = "Successful response", response = SuccessModel.class) })
    
    @RequestMapping(value = "/addressLibrary",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SuccessModel> getList();


    @ApiOperation(value = "修改地址", notes = "修改地址.", response = SuccessModel.class, tags={ "addressLibrary", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response", response = SuccessModel.class),
        @ApiResponse(code = 202, message = "unexpected error", response = SuccessModel.class) })
    
    @RequestMapping(value = "/addressLibrary",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<SuccessModel> updateAddressLibrary(@ApiParam(value = "地址", required = true) @Valid @RequestBody AddressLibrary body);

    @ApiOperation(value = "获取地址/用户ID", notes = "获取地址/用户ID", response = SuccessModel.class, tags={ "addressLibrary", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = SuccessModel.class),
            @ApiResponse(code = 202, message = "User not found", response = SuccessModel.class) })

    @RequestMapping(value = "/addressLibraryByUserID/{userId}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<SuccessModel> addressLibraryByUserID(@ApiParam(value = "用户ID. ",required=true ) @PathVariable("userId") Long userId);


}
